#include <pthread.h>
#include <semaphore.h>
#include <stdbool.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <iostream>
#include <random>

using namespace std ;

sem_t smoker_waits[3];
sem_t agent;

typedef void *(*smokers_t)(void *);

// all smokers has infinite supply of smokers 

void* smoker_0(void* arg)
{
	while (true)
	{
		sleep( rand() % 4+5);
		
		cout<<"Smoker zero waiting to smoke (has paper)"<<endl ;

		sem_wait(&smoker_waits[0]);
		cout<<"Smoker zero received matches and tobacco. Now making cigarette."<<endl;
		sem_post(&agent);
	}

	return NULL;
}


 
void* smoker_1(void* arg)
{
	while (true)
	{
		sleep( rand() % 4+5);
		
		 cout<<"Smoker one waiting to smoke (has matches)"<<endl ;

		sem_wait(&smoker_waits[1]);
		 cout<<"Smoker zero received matches and tobacco. Now making cigarette."<<endl ;
		sem_post(&agent);
	}

	return NULL;
}


 
 
void* smoker_2(void* arg)
{
	while (true)
	{
		sleep( rand() % 4+5);
		
		cout<<"Smoker two waiting to smoke (has tobacco)"<<endl ;

		sem_wait(&smoker_waits[2]);
		cout<<"Smoker zero received matches and tobacco. Now making cigarette."<<endl ;
		sem_post(&agent);
	}

	return NULL;
}


int main(int argc, char* arvg[])
{
	
	srand(time(NULL));


	sem_init(&agent, 0, 1);

	
	pthread_t smoker_threads[3];
	smokers_t smoker_functions[3] = { smoker_0, smoker_1, smoker_2 };


	for (int i = 0; i < 3; ++i)
	{
		sem_init(&smoker_waits[i], 0, 0);

		if(pthread_create(&smoker_threads[i], NULL, smoker_functions[i], NULL) == EAGAIN)
		{
			perror("Insufficent resources to create thread\n");
			return 0;
		}
	}

	while (true)
	{
		
		sem_wait(&agent);

		// Distribute two items for one of the smokers
		sem_post(&smoker_waits[rand() % 2]);
	}

	// Joining  all  threads (smokers) on exit 
	for (int i = 0; i < 3; ++i)
	{
		pthread_join(smoker_threads[i], NULL);
	}
}
